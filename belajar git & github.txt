urutan:
- git init
- git status
- git add file.html / git add . (git add . artinya semua file)
- git commint -m "pesannya apa"

Melihat commit sebelumnya
- git log
- git log -3 (melihat commit 3 terakhir)
- git log -- file.txt (lebih spesifik pada file tertentu)

Membuat Alias graph
- alias graph="git log --all --decorate --oneline --graph"

========================================================================
		====  Bekerja dengan git,menggunakan GitBash ====

1. Buat folder Latihan MySQL dan masuk ke dalam foldernya

2. Buat folder menjadi repo
>> git init
2.1. Maka folder sudah menjadi repo (master). cek isi folder:
>> ls

3. Cek Status
>> git status

4. Add file
>> git add Query.txt

5. Lakukan commit
>> git commit -m "menambahkan file Query.txt" 
* -m artinya massage

=== Jika kita menambahkan dan mem modified file Query.txt ===
1. Lakukan perubahan pada file Query.txt dan buat file baru style.css

2. Jika sudah lakukan Add
>> git add . 
>> git commit -m "menambahkan query create table"

3. Jika ada file yang di hapus, modified, dan di tambah
>> git add . 
>> git commit -m "tulis pesannya yang jelas"
>> git status

4. Melihat commit apa saja yang suda kita lakukan
>> git log

5. Chekout dalam suatu keadaan saat filenya belum di hapus
>> git chekout 4234c (lima digit pertama dari commit, bisa di liat dangan git log -- file.txt)

6. Mengembalikan perubahan dalam satu file saja
>> git chekout 4234c -- file.txt
>> git status
>> git commit -m "mengembalikan file.txt"

========================================================================
            ====  Git Branch & Merge ====







========================================================================
            ====  Push project kita ke GitHub ====

1. git init 
2. git remote add origin https://github.com/DheoAp/Website-Django.git
3. git status
4. git add .
5. git commit -m "pesan commit"
6. git push -u origin master

========================================================================
            		====  Git Remote ====

== Clone ingin merubah file yang ada di Github ==
1. git clone *masukan link
2. ls *lihat isi file
3. cd latihan-gudang *masuk ke folder 
4. alias graph="git log --all --decorate --oneline --graph"
5. git add .
6. git commit -m "pesan"
6.2 jika file modified bisa commit langsung tanpa add, git commit -am "pesan"
7. git push

== merubah file yang ada di local dan simpan ke gitHub menjadi repo baru ==
1. buat file dulu
2. git add . 
3. git commit -m "pesan"
4. modif/ ubah isi file
5. git commit -am "menambahkan line baru"
6. buat new repo di github
7. initialize jangan di ceklis

-menghubungkan/ remote github
8. copy link di git remote add origin *link
9. paste ke git bash
10. git push -u origin master

- ubah isi file lagi -
11. git commit -am "tambah line baru lagi"
12. git push

== jika di local ada perubah dan di github juga ada perubahan ==
*Akan ada konflik

1. git fetch
2. git status
3. graph
4. git pull
5. git add .
6. git commit -m "pesan"
7. git push
8. git graph


========================================================================
            		====  ====












2. Buat file Query.txt  
>> git status <-- untuk cek status
>> git add .
>> git commit -m "menambahkan mahasiswa.html"

2.2. edit file mahasiswa
>> git commit -am "menambahakan 1 data mahasiswa"

3.1 menampilkan semua branch
>> git branch

3.2. membuat branch baru
>> git branch dosen
>> git branch staff
>> git branch <-- untuk menampilkan branch

( >> git log <-- menampilkan history commit yang sudah kita lakukan )
4.1. melihat perjalanan branch kita menggunakan sebuah graph
>> git log --all --decorate --oneline --graph <-- menampilkan visualisasi branch dalam bentuk graph

4.2. membuat alias
>> alias graph="git log --all --decorate --oneline --graph"

5.1 pindah branch
>> git checkout dosen

5.2. buat file baru. dosen.html 
>> git add . (git add "staff.html" untuk menambahkan satu file saja")
>> git commit -m "menambahkan file dosen.html"

6.1. melakukan merge / menggabungkan brance (Fast forward)
ada 2 jenis marge - Fast forward
		  - Three-way merge

>> git checkout master (checkout dulu ke master)
>> git merge dosen (dari master gabung ke dosen)
 
(git branch --merged <-- untuk menggetahuin brance mana yang sudah di merge)
6.2. menghapus branch
>> git branch -d dosen

	*jika branch belum di merge dan ingin di delete
	 >> git branch -D staff

6.3. menggabung branch staff (Three-way merge)
>> git merged staff
>> git branch -d staff
>> graph 


====== Git Remote =====
== push =
====== melakukan push =====
- push melakukan perbuahan dari local
- pull melakukan perubahan dari remote(github)


1. Clone dari Github ke komputer
- klik Clone or download pada git hub lalu copy link(folder dari github)
- buka git bash di desktop(bebas)

2.1. menghubungkan git dengan github
>> git clone (paste link yang di copy tadi)

2.2. masuk ke dalam foldernya
>> cd (nama foldernya)
>> git remote <-- untuk menggetahui nama remotnya(defaultnya origin)
>> git remote -v <-- untuk melihat detail/ cek alamat

3.1. menambahkan file baru yang kita sudah clone ke local
>> buka file di text editor lalu tambah file baru(index.html)

3.2. commit file
>> git add . <- jika filenya untracked harus di add . dulu
>> git commit -m "menambahkan file index.html"

3.3. lakukan perintah push
>> git push
	>> git config --list <-- untuk cek user git
	>>git config --global user.name "namauser"
	>>git config --global user.email "emailuser@gmail.id" <--ganti username email(siapa yang ingin melakukan commitnya)



==== ( folder dari local simpan ke github) ===
1.1. buat folder baru di desktop(bebas)
>> mkdir (nama folder bar) <- membuat folder melalui git bash
>> cd (nama folder)

1.2. jadikan repo git
>> git init

1.3. buka folder yang di desktop dan buat file baru(index.html)
>>git add .
>> git commit -m "membuat file index.html"
1.4. buat 1 commit lagi
>> git commit -am "menambahkan paragraf"

2.1. simpan ke github
- buat repo baru di github
- initialize jangan di ceklis

2.2. buat remote
- copy satu baris yang berada di or push an existing ...
- paste ke git bash 
- copy link di baris ke dua lalu paste ke git bash

2.3. lakukan perubahan
>> git commit -am "menambahkan paragraf"
>> git push -u origin master

 

= pull =
=== kasus jika di github ada perubahan dan di local juga ==
A :
>> tambah file di local ( membuat css dengan font arial )
>> git add .
>> git commit -m "menambahkan file css"
 
B (temna kita) :
>> tambah file di git hub ( membuat css dengan font georgia )
>> commit

A ( melakukan push):
>> git push
>> *maka hasilnya akan error

>> git fetch <-- melakukan pengecekan repo yang ada di github/remot sudah sampai mana commitnya
>> graph

2.4. lakukan pull yang ada di remotnya/di github
>> git pull <- ambil dulu, dan akan otomatis masuk ke codingan kita(text editor)
- lakukan resolve ( Current Change adalah punya kita(yang berwarna hijau))
- lakukan commit 
>> git commit -am "merubah font"
>> git push



=== hosting web statis (github pages) ==
1. buat Repo di github
2. jadikan folder local menjadi Repo
>> git init
3. hubungkan repo kita yang di local ke git hub
>> git remote add (paste link yang ada di github)
>> git add .
>> git commit -m "commit awal"
>> git push -u origin master <-- ini untuk pertama kali


== membuat website untuk masing masing repo ==
1. jadikan folder local menjadi Repo
>> git init
2. hubungkan repo kita yang di local ke git hub
>> git remote add (paste link yang ada di github)
>> git add .
>> git commit -m "commit"
3. buat repo di github
- name reponya bebas
>> git remote add (paste link yang ada di github)
>> git push -u origin master
- ke setting pada repo github
- scroll ke bawah cari github pages
- pilih master di source


== multi remote ==

- frok git hub orang lain
- clone
>> git clone (paste urlnya di sini)
-masuk ke foldernya

cara agar sinkron dengan git orang lain
- tambahkan remote baru yang tujuannya ke orang lain
>> git remote add (nama orang) paste url

cara melihat histori facth orang lain
>> git fetch (nama remote orang lain)

-mengetahuin commit orang lain
>> git fetch (nama remote orang lain)
>> graph
-jika berubah lakukan merge, git local ita ke git orang lain
>> git merge (nama remotnya)/master(ini nama branchnya) <-- local kita sudah sama dengan orang lain

-menyamakan git local dengan github kita
>> git push -u origin master


== remote branch (kita mengusulkan perubahan ke orang lain(pull request))===
- buat branch dulu, jangan ubah yang master
>> git branch features
>> git chekout features
- ubah code di text editor kita
>> git commit  -am "mengubah tulisan"
>> git push origin features
== melakukan usulan
- buka github
- ke branch features
- klik compress & pull request
- pull request



 
